// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using React.Models;

#nullable disable

namespace React.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20240126045713_ss")]
    partial class ss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("React.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("React.Models.CommentPost", b =>
                {
                    b.Property<int>("CommentPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentPostId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentPostId");

                    b.HasIndex("PostId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("React.Models.CommentReview", b =>
                {
                    b.Property<int>("CommentReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentReviewId"));

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("CommentReview");
                });

            modelBuilder.Entity("React.Models.ImagePost", b =>
                {
                    b.Property<int>("ImagePostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagePostId"));

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("ImagePostId");

                    b.HasIndex("PostId");

                    b.ToTable("ImagePost");
                });

            modelBuilder.Entity("React.Models.ImageReview", b =>
                {
                    b.Property<int>("ImageReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageReviewId"));

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("ImageReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ImageReview");
                });

            modelBuilder.Entity("React.Models.LikeCommentPost", b =>
                {
                    b.Property<int>("LikepostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikepostId"));

                    b.Property<int>("CommentPostId")
                        .HasColumnType("int");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikepostId");

                    b.HasIndex("CommentPostId");

                    b.ToTable("LikeCommentPost");
                });

            modelBuilder.Entity("React.Models.LikeCommentReview", b =>
                {
                    b.Property<int>("LikeReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeReviewId"));

                    b.Property<int>("CommentReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeReviewId");

                    b.HasIndex("CommentReviewId");

                    b.ToTable("LikeCommentReview");
                });

            modelBuilder.Entity("React.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("ShopId")
                        .IsUnique();

                    b.ToTable("Post");
                });

            modelBuilder.Entity("React.Models.RatingPost", b =>
                {
                    b.Property<int>("RatingPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingPostId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PostScore")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingPostId");

                    b.HasIndex("PostId");

                    b.ToTable("RatingPost");
                });

            modelBuilder.Entity("React.Models.RatingReview", b =>
                {
                    b.Property<int>("RatingReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingReviewId"));

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewScore")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("RatingReview");
                });

            modelBuilder.Entity("React.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("React.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShopId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("React.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeRegister")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("React.Models.UserVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserVisits");
                });

            modelBuilder.Entity("React.Models.CommentPost", b =>
                {
                    b.HasOne("React.Models.Post", null)
                        .WithMany("CommentPost")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.CommentReview", b =>
                {
                    b.HasOne("React.Models.Review", null)
                        .WithMany("CommentReview")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.ImagePost", b =>
                {
                    b.HasOne("React.Models.Post", null)
                        .WithMany("ImagePost")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.ImageReview", b =>
                {
                    b.HasOne("React.Models.Review", null)
                        .WithMany("ImageReview")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.LikeCommentPost", b =>
                {
                    b.HasOne("React.Models.CommentPost", null)
                        .WithMany("LikeCommentPost")
                        .HasForeignKey("CommentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.LikeCommentReview", b =>
                {
                    b.HasOne("React.Models.CommentReview", null)
                        .WithMany("LikeCommentReview")
                        .HasForeignKey("CommentReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.Post", b =>
                {
                    b.HasOne("React.Models.Shop", "Shop")
                        .WithOne("Post")
                        .HasForeignKey("React.Models.Post", "ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("React.Models.RatingPost", b =>
                {
                    b.HasOne("React.Models.Post", null)
                        .WithMany("RatingPost")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.RatingReview", b =>
                {
                    b.HasOne("React.Models.Review", null)
                        .WithMany("RatingReview")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React.Models.Review", b =>
                {
                    b.HasOne("React.Models.Shop", "Shop")
                        .WithMany("Review")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("React.Models.User", "User")
                        .WithMany("Review")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("React.Models.Shop", b =>
                {
                    b.HasOne("React.Models.User", "User")
                        .WithOne("Shop")
                        .HasForeignKey("React.Models.Shop", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("React.Models.CommentPost", b =>
                {
                    b.Navigation("LikeCommentPost");
                });

            modelBuilder.Entity("React.Models.CommentReview", b =>
                {
                    b.Navigation("LikeCommentReview");
                });

            modelBuilder.Entity("React.Models.Post", b =>
                {
                    b.Navigation("CommentPost");

                    b.Navigation("ImagePost");

                    b.Navigation("RatingPost");
                });

            modelBuilder.Entity("React.Models.Review", b =>
                {
                    b.Navigation("CommentReview");

                    b.Navigation("ImageReview");

                    b.Navigation("RatingReview");
                });

            modelBuilder.Entity("React.Models.Shop", b =>
                {
                    b.Navigation("Post")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("React.Models.User", b =>
                {
                    b.Navigation("Review");

                    b.Navigation("Shop");
                });
#pragma warning restore 612, 618
        }
    }
}
